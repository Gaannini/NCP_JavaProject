package Server;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import liarGame.LiarGame;

public class GameServer {
	private Map<String, List<Socket>> gameClients; // 클라이언트들의 소켓을 저장하는 리스트
	private Map<String, Game> games;// 게임이름과 해당 게임을 매핑하는 맵
	private ServerSocket serverSocket; // 서버 소켓.
	private Socket clientsocket; // 클라이언트가 접속하면 새로 만드는 소켓

	public GameServer() {
		gameClients = new HashMap<>();
		games = new HashMap<String, Game>();
		games.put("liar", new LiarGame());
	}

	// 게임서버를 시작하는 메소드
	public void startServer(int port) {
		try {
			serverSocket = new ServerSocket(port);
			System.out.println("서버 시작. port : " + port + "...");

			while (true) {
				clientsocket = serverSocket.accept(); // 서버의 접속을 대기중
				System.out.println("클라이언트 연결 : " + clientsocket);

				// 클라이언트 처리를 위한 쓰레드 시작
				clientInfo CI = new clientInfo(clientsocket);
				CI.start();
			}
		} catch (Exception e) {
			System.out.println("게임서버 연결안됨.");
		}
	}

	public class clientInfo extends Thread {
		private Socket socket; // 클라이언트 소켓을 받아서 사용하는 변수
		//public PrintWriter writer; // 쓰기 버퍼.
		private BufferedReader reader; // 읽기 버퍼.

		public String clientId; // 클라이언트 아이디를 담는 변수.
		public String gamename; // 클라이언트가 선택한 게임 이름

		private GameServer gameServer;
		String nickname;

		public clientInfo(Socket socket) {
			this.socket = socket;
		}

		@Override
		public void run() {
			try {
				reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				//writer = new PrintWriter(socket.getOutputStream(), true);

				String readerMsg = null;
				String[] parsReaderMsg;
				while ((readerMsg = reader.readLine()) != null) {
					parsReaderMsg = readerMsg.split("&");
					// Client Thread에서 동작하는 프로토콜
					protocolID(parsReaderMsg); // ID 저장
					protocolGameSelect(parsReaderMsg,socket); // 게임 선택
				}
//				ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
//				nickname = (String) objectInputStream.readObject(); // 닉네임입력
//				gamename = (String) objectInputStream.readObject(); // 게임이름입력
//
//				System.out.println("Nickname: " + nickname);
//				System.out.println("Selected game: " + gamename);
//				gameServer.startGame(socket, gamename);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		private void protocolGameSelect(String[] parsReaderMsg, Socket socket) {
		    if (parsReaderMsg[0].equals("gamename")) { // 배열의 첫 번째가 gamename인 경우에만 실행
		        String gameName = parsReaderMsg[1];
		        startGame(socket, gameName);
		    }
		}

		//....
		private void protocolID(String[] parsReaderMsg) {
		    if (parsReaderMsg[0].equals("ID")) { // 배열의 첫 번째가 ID인 경우에만 실행
		        clientId = parsReaderMsg[1];
		        for (Map.Entry<String, List<Socket>> entry : gameClients.entrySet()) {
		            List<Socket> clientSockets = entry.getValue();
		            for (Socket clientSocket : clientSockets) {
		                try {
		                    PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);
		                    writer.println("SERVER&[" + clientId + "] is enter the room.");
		                    writer.println("ID&");
		                    System.out.println("clientId: " + clientId);
		                } catch (Exception e) {
		                    e.printStackTrace();
		                }
		            }
		        }

		        for (Map.Entry<String, List<Socket>> entry : gameClients.entrySet()) {
		            String clientId = entry.getKey();
		            for (Map.Entry<String, List<Socket>> subEntry : gameClients.entrySet()) {
		                String subClientId = subEntry.getKey();
		                List<Socket> subClientSockets = subEntry.getValue();
		                for (Socket subClientSocket : subClientSockets) {
		                    try {
		                        PrintWriter writer = new PrintWriter(subClientSocket.getOutputStream(), true);
		                        writer.println("IDLIST&[" + clientId + "]");
		                    } catch (Exception e) {
		                        e.printStackTrace();
		                    }
		                }
		            }
		        }
		    }
		}

	}

	// 사용자가 선택한 게임 시작 메소드
	public void startGame(Socket socket, String gameName) {
		Game selectedGame = games.get(gameName.toLowerCase());
		if (selectedGame != null) {
			selectedGame.start(socket); // 게임실행

			// 해당게임에 플레이어 저장..?
			List<Socket> clients = gameClients.computeIfAbsent(gameName, k -> new ArrayList<>());
			clients.add(socket);
		} else {
			System.out.println("게임이름을 잘못입력하셨습니다.");
		}
	}
	/*
	 * 클라이언트 목록을 출력하려면 List<Socket> clients = gameClients.getOrDefault("liar", new
	 * ArrayList<>()); System.out.println("Liar Game Clients:"); for (Socket socket
	 * : clients) System.out.println(socket);
	 *
	 * 이런식으로 작성하시면 될거가타여,,,
	 */

	public static void main(String[] args) {
		GameServer gameServer = new GameServer();
		gameServer.startServer(12345);
	}
}
