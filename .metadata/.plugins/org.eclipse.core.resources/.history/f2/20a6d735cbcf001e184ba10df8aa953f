import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class GameClientGUI extends JFrame {
	private Socket socket;
	private PrintWriter outputWriter;
	private BufferedReader inputReader;
	private JTextField nicknameField;
	private JButton startButton;
	private JButton liarButton;
	private JButton bingoButton;
	private JButton omokButton;

	public GameClientGUI() {
		setTitle("게임 시작");
		setSize(400, 200);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel panel = new JPanel(new FlowLayout());

		nicknameField = new JTextField(20);
		startButton = new JButton("게임 시작");
		startButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String nickname = nicknameField.getText();
				if (nickname.isEmpty()) {
					JOptionPane.showMessageDialog(GameClientGUI.this, "닉네임을 입력하세요.");
					return;
				}

				try {
					outputWriter.println("ID&" + nickname); // 서버에 닉네임 전송

					// 여기에서 세 개의 게임 중 하나를 선택하는 화면으로 전환합니다.
					panel.setVisible(false);
					showGameSelectionPanel();
				} catch (IOException ex) {
					ex.printStackTrace();
				}
			}
		});

		panel.add(nicknameField);
		panel.add(startButton);
		getContentPane().add(panel);

		setLocationRelativeTo(null);
		setVisible(true);
	}

	private void showGameSelectionPanel() {
		JPanel gameSelectionPanel = new JPanel(new FlowLayout());

		liarButton = new JButton("라이어");
		liarButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				startGame("liar");
			}
		});

		bingoButton = new JButton("빙고");
		bingoButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				startGame("bingo");
			}
		});

		omokButton = new JButton("오목");
		omokButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				startGame("omok");
			}
		});

		gameSelectionPanel.add(liarButton);
		gameSelectionPanel.add(bingoButton);
		gameSelectionPanel.add(omokButton);

		getContentPane().add(gameSelectionPanel);
		revalidate();
	}

	private void startGame(String gameName) {
		try {
			outputWriter.println("gamename&" + gameName); // 서버에 게임 이름 전송

			System.out.println("게임을 시작합니다: " + gameName);

			// 서버로부터의 응답 출력
			String serverResponse;
			while ((serverResponse = inputReader.readLine()) != null) {
				System.out.println("Server: " + serverResponse);
			}

			// 입력 스트림과 소켓 닫기
			inputReader.close();
			outputWriter.close();
			socket.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GameClientGUI window = new GameClientGUI();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
